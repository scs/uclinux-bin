#! /usr/bin/env bash
# do-checkout: fetch tags and branches from the remote 'origin' and check them out in the working-directory

print() { echo "$1" >&2; }
inform() { print "$0: $1"; }
warn() { print "Warning: $1"; }
error() { inform "Error: $1"; }
fail() { error "$1"; exit 1; }
status() { echo -n "$1" >&2; }

clear_line() { echo -en "\e[2K\e[1G" >&2; }
replace_line() { clear_line; status "$1"; }

usage_error() { usage; fail "$1"; }
help() { usage; }

usage() {
	cat << EOF >&2
Usage:
    do-checkout [ -h | --help ]
    do-checkout <what> <how>

Where:
    <waht>: [ -t, --tags | -T, --no-tags ] [ -b, --branches | -B, --no-branches ]
    <how>: [ --folders [ none | tree | ref ] | -f | -F
    -t, --tags: Checkout all tags.
    -T, --no-tags: Do not checkout tags.
    -b, --branches: Checkout all branches.
    -B, --no-branches: Do not checkout branches.
    --folders none, -F:
        Each file in each checked-out tree is placed in the same directory.
    --folders tree:
        Each checked-out tree is placed it it's own directoy.
    --folder ref, -f: Subdirectories are created for each tag/branch component.
    -H: Do not search the checked out tags/branches for the longest 'HISTORY' file.
EOF
} #'

OPT_CHECKOUT_TAGS=1
OPT_CHECKOUT_BRANCHES=
OPT_FOLDERS=tree
OPT_FETCH=
OPT_HARVEST_HISTORY=1

while [ "${1:0:1}" == "-" ]; do
	if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
		help
		exit
	elif [ "$1" == "-t" ] || [ "$1" == "--tags" ]; then
		OPT_CHECKOUT_TAGS=1
	elif [ "$1" == "-T" ] || [ "$1" == "--no-tags" ]; then
		OPT_CHECKOUT_TAGS=
	elif [ "$1" == "-b" ] || [ "$1" == "--branches" ]; then
		OPT_CHECKOUT_BRANCHES=1
	elif [ "$1" == "-B" ] || [ "$1" == "--no-branches" ]; then
		OPT_CHECKOUT_BRANCHES=
	elif [ "$1" == "--folders" ]; then
		[ "$2" ] || usage_error "Option requires an argument: $1"
		[ "$2" == "none" ] || [ "$2" == "tree" ] || [ "$2" == "ref" ] || usage_error "$1: Argument must be one of: none, tree, ref"
		OPT_FOLDERS=$2
		shift
	elif [ "$1" == "-f" ]; then
		OPT_FOLDERS=ref
	elif [ "$1" == "-F" ]; then
		OPT_FOLDERS=none
	elif [ "$1" == "--fetch" ]; then
		OPT_FETCH=1
	elif [ "$1" == "-H" ]; then
		OPT_HARVEST_HISTORY=
	else
		usage_error "Unknown option: $1"
	fi
	shift
done

[ "$1" ] && usage_error "No arguments required!"
[ "$OPT_CHECKOUT_TAGS" ] || [ "$OPT_CHECKOUT_BRANCHES" ] || error_exit "At least one of tags or branches must be checked out."

if [ "$OPT_FETCH" ]; then
	print "Fetching tags from remote origin ..."
	git fetch --tags "origin" "master"
	git reset --hard "origin/master" > /dev/null
fi
print "Cleaning previous checkouts ..."
git clean -fdq

COUNT=$(COUNT=0; {
	[ "$OPT_CHECKOUT_TAGS" ] && git tag
	[ "$OPT_CHECKOUT_BRANCHES" ] && git branch | cut -c "3-"
} | grep -vF "do-checkout" | (while IFS= read i; do
	[ "$OPT_FOLDERS" == "none" ] && PREFIX="$(echo "$i" | sed -r "s/\//_/g")_"
	[ "$OPT_FOLDERS" == "tree" ] && PREFIX="$(echo "$i" | sed -r "s/\//_/g")/"
	[ "$OPT_FOLDERS" == "ref" ] && PREFIX="$i/"
	
	print "Checking out: $i ..."
	COUNT=$[ $COUNT + 1 ]
	
	git archive "--prefix=$PREFIX" "$i" | tar -x
done; echo $COUNT))

print "$COUNT $([ $COUNT -eq 1 ] && echo "tag/branch" || echo "tags/branches") checked out."

if [ "$OPT_HARVEST_HISTORY" ]; then
	print "Finding most recent HISTORY file ..."
	NEWEST_HISTORY=$({
		[ "$OPT_CHECKOUT_TAGS" ] && git tag
		[ "$OPT_CHECKOUT_BRANCHES" ] && git branch | cut -c "3-"
	} | grep -vF "do-checkout" | { while IFS= read i; do
		git show "$i:HISTORY" > /dev/null 2>&1 && echo "$(git show "$i:HISTORY" > /dev/null 2>&1 | wc -l | grep -oE "[0-9]+") $i"
	done } | sort -nr | head -n 1 | cut -d " " -f 2-)
	
	if [ "$NEWEST_HISTORY" ]; then
		print "Using the HISTORY file from $NEWEST_HISTORY."
		git show "$NEWEST_HISTORY:HISTORY" > "HISTORY"
	else
		warn "None of the checked out tags/branches has a 'HISTORY' file in it's root tree."
	fi
fi
